function CreateKalmanFilter(A, H, G, Q, R, x_prior, P_prior)
    KM.A = A;
    KM.H = H;
    KM.G = G;
    KM.Q = Q;
    KM.R = R;
    
    KM.x_prior = x_prior;
    KM.P_prior = P_prior;
    KM.x_postirior = zeros('like', x_prior);
    KM.P_postirior = zeros('like', P_prior);
    
    KM.update = @(KM, z)

end

%update
function [x_aposterior,P_aposterior] = update(KM, x_aprior, P_aprior, z)
    K = P_aprior * KM.H.' * (KM.H * P_aprior * KM.H.' + KM.R)^-1;
    x_aposterior = x_aprior + K * (z - KM.H * x_aprior);
    P_aposterior = (eye(2) - K * KM.H) * P_aprior;
end

%predict
function [x_aprior, P_aprior] = predict(KM, x_aposterior, P_aposterior)
    x_aprior = KM.A * x_aposterior;
    P_aprior = KM.A * P_aposterior * KM.A.' + KM.Q;
end